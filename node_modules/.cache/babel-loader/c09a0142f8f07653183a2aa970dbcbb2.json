{"ast":null,"code":"import { SET_VIDEO_ID, EDIT_RIFF, SAVE_RIFF_SUCCESS, SAVE_RIFF, CREATE_TEMP_AUDIO_RIFF, CREATE_TEMP_TEXT_RIFF, RIFF_LOADED, SAVE_TEMP_AUDIO, CANCEL_EDIT, LOAD_RIFF } from '../actions/index.js';\nlet initialState = {\n  saving: {},\n  loading: {},\n  temp: null,\n  all: {},\n  editIndex: null\n};\n\nconst riffsAudioReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case CREATE_TEMP_AUDIO_RIFF:\n    case CREATE_TEMP_TEXT_RIFF:\n      return { ...state,\n        editIndex: null\n      };\n\n    case SET_VIDEO_ID:\n      return initialState;\n\n    case EDIT_RIFF:\n      return { ...state,\n        temp: state.all[action.id],\n        // copy specified riff audio to temp\n        editIndex: action.payload\n      };\n\n    case SAVE_RIFF_SUCCESS:\n      {\n        if (action.payload.type === 'add') {\n          const {\n            [action.payload.tempId]: foo,\n            ...saving\n          } = state.saving; // foo is discarded\n\n          return { ...state,\n            saving,\n            all: { ...state.all,\n              [action.payload.id]: state.temp\n            },\n            temp: null\n          };\n        } else return state;\n      }\n\n    case SAVE_RIFF:\n      {\n        // adding a new riff:\n        if (state.editIndex === null) return { ...state,\n          saving: { ...state.saving,\n            [action.riff.tempId]: true\n          },\n          editIndex: null\n        }; // EDIT_MODE (existing riff):\n        else return { ...state,\n          all: { ...state.all,\n            [action.riff.id]: action.payload.payload\n          },\n          editIndex: null,\n          temp: null\n        };\n      }\n\n    case LOAD_RIFF:\n      {\n        return { ...state,\n          loading: { ...state.loading,\n            [action.payload]: true\n          }\n        };\n      }\n\n    case RIFF_LOADED:\n      {\n        const {\n          [action.id]: foo,\n          ...loading\n        } = state.loading; // foo is discarded\n\n        const audio = new Blob(new Array(action.payload), {\n          type: 'audio/mp3'\n        });\n        return { ...state,\n          loading,\n          all: { ...state.all,\n            [action.id]: audio\n          },\n          temp: state.editIndex === null ? null : audio\n        };\n      }\n\n    case SAVE_TEMP_AUDIO:\n      return { ...state,\n        temp: action.payload\n      };\n\n    case CANCEL_EDIT:\n      return { ...state,\n        temp: null,\n        editIndex: null\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default riffsAudioReducer;","map":{"version":3,"names":["SET_VIDEO_ID","EDIT_RIFF","SAVE_RIFF_SUCCESS","SAVE_RIFF","CREATE_TEMP_AUDIO_RIFF","CREATE_TEMP_TEXT_RIFF","RIFF_LOADED","SAVE_TEMP_AUDIO","CANCEL_EDIT","LOAD_RIFF","initialState","saving","loading","temp","all","editIndex","riffsAudioReducer","state","action","type","id","payload","tempId","foo","riff","audio","Blob","Array"],"sources":["/Users/davidnewberry/Documents/rifftube-git/RiffTube/front-end/src/reducers/riffsAudio-reducer.js"],"sourcesContent":["import {\n  SET_VIDEO_ID,\n  EDIT_RIFF,\n  SAVE_RIFF_SUCCESS,\n  SAVE_RIFF,\n  CREATE_TEMP_AUDIO_RIFF,\n  CREATE_TEMP_TEXT_RIFF,\n  RIFF_LOADED,\n  SAVE_TEMP_AUDIO,\n  CANCEL_EDIT,\n  LOAD_RIFF,\n} from '../actions/index.js';\n\nlet initialState = { saving: {}, loading: {}, temp: null, all: {}, editIndex: null };\n\nconst riffsAudioReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case CREATE_TEMP_AUDIO_RIFF:\n    case CREATE_TEMP_TEXT_RIFF:\n      return { ...state, editIndex: null };\n    case SET_VIDEO_ID:\n      return initialState;\n    case EDIT_RIFF:\n      return {\n        ...state,\n        temp: state.all[action.id], // copy specified riff audio to temp\n        editIndex: action.payload\n      };\n    case SAVE_RIFF_SUCCESS: {\n      if (action.payload.type === 'add') {\n        const { [action.payload.tempId]: foo, ...saving } = state.saving; // foo is discarded\n        return {\n          ...state,\n          saving,\n          all: {\n            ...state.all,\n            [action.payload.id]: state.temp,\n          },\n          temp: null,\n        };\n      } else return state;\n    }\n    case SAVE_RIFF: {\n      // adding a new riff:\n      if (state.editIndex === null)\n        return {\n          ...state,\n          saving: {\n            ...state.saving,\n            [action.riff.tempId]: true,\n          },\n          editIndex: null,\n        };\n      // EDIT_MODE (existing riff):\n      else\n        return {\n          ...state,\n          all: {\n            ...state.all,\n            [action.riff.id]: action.payload.payload,\n          },\n          editIndex: null,\n          temp: null,\n        };\n    }\n    case LOAD_RIFF: {\n      return {\n        ...state,\n        loading: {\n          ...state.loading,\n          [action.payload]: true,\n        },\n      };\n    }\n    case RIFF_LOADED: {\n      const { [action.id]: foo, ...loading } = state.loading; // foo is discarded\n      const audio = new Blob(new Array(action.payload), {\n            type: 'audio/mp3',\n          });\n      return {\n        ...state,\n        loading,\n        all: {\n          ...state.all,\n          [action.id]: audio\n        },\n        temp: state.editIndex === null ? null : audio,\n      };\n    }\n    case SAVE_TEMP_AUDIO:\n      return {\n        ...state,\n        temp: action.payload,\n      };\n    case CANCEL_EDIT:\n      return {\n        ...state,\n        temp: null,\n        editIndex: null,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default riffsAudioReducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}