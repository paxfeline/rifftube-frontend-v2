{"ast":null,"code":"import { RECEIVE_RIFF_META } from '../actions/index.js';\nlet initialState = [];\n\nconst riffsMetaReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case RECEIVE_RIFF_META:\n      return action.payload.body.map(el => ({ ...el,\n        time: el.start_time,\n        payload: el.isText ? el.text : null,\n        type: el.isText ? 'text' : 'audio'\n      }));\n\n    default:\n      return state;\n  }\n};\n\nexport default riffsMetaReducer;","map":{"version":3,"names":["RECEIVE_RIFF_META","initialState","riffsMetaReducer","state","action","type","payload","body","map","el","time","start_time","isText","text"],"sources":["/Users/davidnewberry/Documents/rifftube-git/RiffTube/front-end/src/reducers/riffsMeta-reducer.js"],"sourcesContent":["import { RECEIVE_RIFF_META } from '../actions/index.js';\n\nlet initialState = [];\n\nconst riffsMetaReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case RECEIVE_RIFF_META:\n      return action.payload.body.map((el) => ({\n        ...el,\n        time: el.start_time,\n        payload: el.isText ? el.text : null,\n        type: el.isText ? 'text' : 'audio',\n      }));\n    default:\n      return state;\n  }\n};\n\nexport default riffsMetaReducer;\n"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,qBAAlC;AAEA,IAAIC,YAAY,GAAG,EAAnB;;AAEA,MAAMC,gBAAgB,GAAG,YAAkC;EAAA,IAAjCC,KAAiC,uEAAzBF,YAAyB;EAAA,IAAXG,MAAW;;EACzD,QAAQA,MAAM,CAACC,IAAf;IACE,KAAKL,iBAAL;MACE,OAAOI,MAAM,CAACE,OAAP,CAAeC,IAAf,CAAoBC,GAApB,CAAyBC,EAAD,KAAS,EACtC,GAAGA,EADmC;QAEtCC,IAAI,EAAED,EAAE,CAACE,UAF6B;QAGtCL,OAAO,EAAEG,EAAE,CAACG,MAAH,GAAYH,EAAE,CAACI,IAAf,GAAsB,IAHO;QAItCR,IAAI,EAAEI,EAAE,CAACG,MAAH,GAAY,MAAZ,GAAqB;MAJW,CAAT,CAAxB,CAAP;;IAMF;MACE,OAAOT,KAAP;EATJ;AAWD,CAZD;;AAcA,eAAeD,gBAAf"},"metadata":{},"sourceType":"module"}