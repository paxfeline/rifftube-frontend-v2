{"ast":null,"code":"var _jsxFileName = \"/Users/davidnewberry/Documents/rifftube-git/RiffTube/front-end/src/components/RiffControls/EditInterface.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport YouTubeVideo from '../YouTubeVideo/YouTubeVideo';\nimport Login from '../Login/Login';\nimport EditControls from './EditControls';\nimport { setVideoID, setWebSocket, getRiffsMeta, getRiffs, setRecorder } from '../../actions';\nimport MetaBar from '../MetaBar';\nimport NavBar from '../NavBar.js';\n\nclass EditInterface extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      if (this.props.match.params.videoID) {\n        this.props.setVideoID(this.props.match.params.videoID, this.props.googleUser);\n        this.videoIDRef.current.value = this.props.match.params.videoID;\n      }\n    };\n\n    this.componentDidUpdate = (prevProps, prevState) => {\n      if (this.props.match.params.videoID !== this.props.videoID) {\n        this.props.setVideoID(this.props.match.params.videoID, this.props.googleUser);\n        this.videoIDRef.current.value = this.props.match.params.videoID;\n      }\n\n      if (this.loggedIn() && this.props.videoID && this.props.googleUser !== prevProps.googleUser) {\n        this.props.getRiffs(this.props.videoID, this.props.googleUser);\n      }\n\n      if (this.loggedIn() && (!this.props.websocket || this.props.videoID !== prevProps.videoID)) {\n        //const websocket = new WebSocket( `ws://localhost:3300/riff?videoID=${this.props.match.params.videoID}&googleToken=${this.props.googleUser.getAuthResponse().id_token}` );\n        var baseURL;\n        if (process.env.NODE_ENV === 'production') baseURL = 'wss://rifftube.herokuapp.com';else baseURL = 'ws://localhost:3300';\n        const websocket = new WebSocket(`${baseURL}/riff?videoID=${this.props.match.params.videoID}&googleToken=${this.props.googleUser.getAuthResponse().id_token}`);\n\n        websocket.onmessage = event => {\n          console.log(event.data);\n          const msg = JSON.parse(event.data);\n          if (msg.video_id === this.props.videoID && msg.type === 'update') this.props.getRiffsMeta(this.props.videoID);\n        };\n\n        this.props.setWebSocket(websocket);\n      }\n    };\n\n    this.loggedIn = () => {\n      if (this.props.googleUser) return this.props.googleUser.isSignedIn();\n      return false;\n    };\n\n    this.authCheck = (Component, DefaultComponent) => {\n      return this.loggedIn() ? /*#__PURE__*/React.createElement(Component, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 30\n        }\n      }) : /*#__PURE__*/React.createElement(DefaultComponent, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 46\n        }\n      });\n    };\n\n    this.extractVideoID = url => {\n      var regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;\n      var match = url.match(regExp);\n\n      if (match && match[7].length === 11) {\n        return match[7];\n      } else {\n        return url; // if extraction fails, fallback on assuming they gave an ID\n      }\n    };\n\n    this.videoIDRef = React.createRef();\n  }\n\n  render() {\n    return this.props.match.params.videoID ? /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(NavBar, {\n      color: \"grey\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"youtube-section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"top-section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"title-and-url\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"heading-primary-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 15\n      }\n    }, \"RiffTube\"))), /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"get-started-instructions\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }\n    }, this.loggedIn() ? null : /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Login, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 27\n      }\n    }, \"to get started\"))), /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }\n    }, \"Paste any YouTube URL here \\u2192 \"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      defaultValue: this.props.videoID,\n      ref: this.videoIDRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn\",\n      id: \"change-video-btn\",\n      onClick: e => {\n        const vID = this.extractVideoID(this.videoIDRef.current.value);\n        this.props.history.push(`/riff/${vID}`);\n        this.props.setVideoID(vID, this.props.googleUser);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }\n    }, \"Change Video\"), /*#__PURE__*/React.createElement(YouTubeVideo, {\n      id: this.props.videoID,\n      riffs: this.props.riffs,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(MetaBar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"view-share-riff-link\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      href: '/view/' + this.props.videoID + (this.props.user_id ? '?solo=' + this.props.user_id : ''),\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 13\n      }\n    }, \"View & Share Riffed Video\"))), this.loggedIn() ? /*#__PURE__*/React.createElement(EditControls, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 28\n      }\n    }) : null) : /*#__PURE__*/React.createElement(Redirect, {\n      to: `/riff/${this.props.videoID}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  riffs: state.riffs.all,\n  videoID: state.videoID,\n  googleUser: state.googleUser,\n  user_id: state.user_id,\n  websocket: state.websocket,\n  recorder: state.recorder\n});\n\nconst mapDispatchToProps = {\n  setVideoID,\n  setWebSocket,\n  getRiffsMeta,\n  getRiffs,\n  setRecorder\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(EditInterface);","map":{"version":3,"names":["React","connect","Redirect","YouTubeVideo","Login","EditControls","setVideoID","setWebSocket","getRiffsMeta","getRiffs","setRecorder","MetaBar","NavBar","EditInterface","Component","constructor","props","componentDidMount","match","params","videoID","googleUser","videoIDRef","current","value","componentDidUpdate","prevProps","prevState","loggedIn","websocket","baseURL","process","env","NODE_ENV","WebSocket","getAuthResponse","id_token","onmessage","event","console","log","data","msg","JSON","parse","video_id","type","isSignedIn","authCheck","DefaultComponent","extractVideoID","url","regExp","length","createRef","render","e","vID","history","push","riffs","user_id","mapStateToProps","state","all","recorder","mapDispatchToProps"],"sources":["/Users/davidnewberry/Documents/rifftube-git/RiffTube/front-end/src/components/RiffControls/EditInterface.js"],"sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport YouTubeVideo from '../YouTubeVideo/YouTubeVideo';\nimport Login from '../Login/Login';\nimport EditControls from './EditControls';\nimport {\n  setVideoID,\n  setWebSocket,\n  getRiffsMeta,\n  getRiffs,\n  setRecorder,\n} from '../../actions';\nimport MetaBar from '../MetaBar';\nimport NavBar from '../NavBar.js';\n\nclass EditInterface extends React.Component {\n  constructor(props) {\n    super(props);\n    this.videoIDRef = React.createRef();\n  }\n\n  componentDidMount = () => {\n    if (this.props.match.params.videoID) {\n      this.props.setVideoID(\n        this.props.match.params.videoID,\n        this.props.googleUser\n      );\n      this.videoIDRef.current.value = this.props.match.params.videoID;\n    }\n  };\n\n  componentDidUpdate = (prevProps, prevState) => {\n    if (this.props.match.params.videoID !== this.props.videoID) {\n      this.props.setVideoID(\n        this.props.match.params.videoID,\n        this.props.googleUser\n      );\n      this.videoIDRef.current.value = this.props.match.params.videoID;\n    }\n\n    if (\n      this.loggedIn() &&\n      this.props.videoID &&\n      this.props.googleUser !== prevProps.googleUser\n    ) {\n      this.props.getRiffs(this.props.videoID, this.props.googleUser);\n    }\n\n    if (\n      this.loggedIn() &&\n      (!this.props.websocket || this.props.videoID !== prevProps.videoID)\n    ) {\n      //const websocket = new WebSocket( `ws://localhost:3300/riff?videoID=${this.props.match.params.videoID}&googleToken=${this.props.googleUser.getAuthResponse().id_token}` );\n      var baseURL;\n      if (process.env.NODE_ENV === 'production')\n        baseURL = 'wss://rifftube.herokuapp.com';\n      else baseURL = 'ws://localhost:3300';\n\n      const websocket = new WebSocket(\n        `${baseURL}/riff?videoID=${\n          this.props.match.params.videoID\n        }&googleToken=${this.props.googleUser.getAuthResponse().id_token}`\n      );\n      websocket.onmessage = (event) => {\n        console.log(event.data);\n\n        const msg = JSON.parse(event.data);\n\n        if (msg.video_id === this.props.videoID && msg.type === 'update')\n          this.props.getRiffsMeta(this.props.videoID);\n      };\n      this.props.setWebSocket(websocket);\n    }\n  };\n\n  loggedIn = () => {\n    if (this.props.googleUser) return this.props.googleUser.isSignedIn();\n\n    return false;\n  };\n\n  authCheck = (Component, DefaultComponent) => {\n    return this.loggedIn() ? <Component /> : <DefaultComponent />;\n  };\n  /* extracts the youtube id from a url. got help from: https://ctrlq.org/code/19797-regex-youtube-id */\n  extractVideoID = (url) => {\n    var regExp =\n      /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;\n    var match = url.match(regExp);\n    if (match && match[7].length === 11) {\n      return match[7];\n    } else {\n      return url; // if extraction fails, fallback on assuming they gave an ID\n    }\n  };\n\n  render() {\n    return this.props.match.params.videoID ? (\n      <React.Fragment>\n        <NavBar color=\"grey\" />\n        <div className=\"youtube-section\">\n          <div className=\"top-section\">\n            <div className=\"title-and-url\">\n              <h1 className=\"heading-primary-main\">RiffTube</h1>\n            </div>\n          </div>\n          <h4 className=\"get-started-instructions\">\n            {this.loggedIn() ? null : (\n              <React.Fragment>\n                <Login /> <p>to get started</p>\n              </React.Fragment>\n            )}\n          </h4>\n          <label>Paste any YouTube URL here &#8594; </label>\n          <input\n            type=\"text\"\n            defaultValue={this.props.videoID}\n            ref={this.videoIDRef}\n          />\n          <button className=\"btn\" id=\"change-video-btn\" onClick={(e) => {\n              const vID = this.extractVideoID(this.videoIDRef.current.value);\n\n              this.props.history.push(`/riff/${vID}`);\n\n              this.props.setVideoID(vID, this.props.googleUser);\n            }}>\n            Change Video\n          </button>\n          <YouTubeVideo id={this.props.videoID} riffs={this.props.riffs} />\n          <MetaBar />\n          <div className=\"view-share-riff-link\">\n            <a\n              href={\n                '/view/' +\n                this.props.videoID +\n                (this.props.user_id ? '?solo=' + this.props.user_id : '')\n              }\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              View &amp; Share Riffed Video\n            </a>\n          </div>\n        </div>\n        {this.loggedIn() ? <EditControls /> : null}\n      </React.Fragment>\n    ) : (\n      <Redirect to={`/riff/${this.props.videoID}`} />\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  riffs: state.riffs.all,\n  videoID: state.videoID,\n  googleUser: state.googleUser,\n  user_id: state.user_id,\n  websocket: state.websocket,\n  recorder: state.recorder,\n});\n\nconst mapDispatchToProps = {\n  setVideoID,\n  setWebSocket,\n  getRiffsMeta,\n  getRiffs,\n  setRecorder,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditInterface);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}