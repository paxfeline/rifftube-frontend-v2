{"ast":null,"code":"import { RECEIVE_RIFF_LIST, LOAD_USER_DATA } from '../actions/index.js';\n\nconst useridReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case RECEIVE_RIFF_LIST:\n      return action.payload.user_id || state;\n    // hacky but added because no user-id is returned for view riffs\n\n    case LOAD_USER_DATA:\n      return action.payload.userid;\n    // so inconsistent\n\n    default:\n      return state;\n  }\n};\n\nexport default useridReducer;","map":{"version":3,"names":["RECEIVE_RIFF_LIST","LOAD_USER_DATA","useridReducer","state","action","type","payload","user_id","userid"],"sources":["/Users/davidnewberry/Documents/rifftube-git/RiffTube/front-end/src/reducers/userid-reducer.js"],"sourcesContent":["import { RECEIVE_RIFF_LIST, LOAD_USER_DATA } from '../actions/index.js';\n\nconst useridReducer = (state = null, action) => {\n  switch (action.type) {\n    case RECEIVE_RIFF_LIST:\n      return action.payload.user_id || state; // hacky but added because no user-id is returned for view riffs\n    case LOAD_USER_DATA:\n      return action.payload.userid; // so inconsistent\n    default:\n      return state;\n  }\n};\n\nexport default useridReducer;\n"],"mappings":"AAAA,SAASA,iBAAT,EAA4BC,cAA5B,QAAkD,qBAAlD;;AAEA,MAAMC,aAAa,GAAG,YAA0B;EAAA,IAAzBC,KAAyB,uEAAjB,IAAiB;EAAA,IAAXC,MAAW;;EAC9C,QAAQA,MAAM,CAACC,IAAf;IACE,KAAKL,iBAAL;MACE,OAAOI,MAAM,CAACE,OAAP,CAAeC,OAAf,IAA0BJ,KAAjC;IAAwC;;IAC1C,KAAKF,cAAL;MACE,OAAOG,MAAM,CAACE,OAAP,CAAeE,MAAtB;IAA8B;;IAChC;MACE,OAAOL,KAAP;EANJ;AAQD,CATD;;AAWA,eAAeD,aAAf"},"metadata":{},"sourceType":"module"}